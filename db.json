{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/dahe1.png","path":"img/dahe1.png","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/weixin.jpg","path":"img/weixin.jpg","modified":0,"renderable":0},{"_id":"source/img/gituse/branches.png","path":"img/gituse/branches.png","modified":0,"renderable":0},{"_id":"source/img/shaoxing/周恩来回绍兴.jpg","path":"img/shaoxing/周恩来回绍兴.jpg","modified":0,"renderable":0},{"_id":"source/img/shaoxing/插图21.jpg","path":"img/shaoxing/插图21.jpg","modified":0,"renderable":0},{"_id":"source/img/shaoxing/插图32.jpg","path":"img/shaoxing/插图32.jpg","modified":0,"renderable":0},{"_id":"source/img/shaoxing/插图xls.jpg","path":"img/shaoxing/插图xls.jpg","modified":0,"renderable":0},{"_id":"source/img/shaoxing/插图之十二.jpg","path":"img/shaoxing/插图之十二.jpg","modified":0,"renderable":0},{"_id":"source/img/shaoxing/明信片.jpg","path":"img/shaoxing/明信片.jpg","modified":0,"renderable":0},{"_id":"source/img/shaoxing/绍兴.jpg","path":"img/shaoxing/绍兴.jpg","modified":0,"renderable":0},{"_id":"source/img/shaoxing/藏书票.jpg","path":"img/shaoxing/藏书票.jpg","modified":0,"renderable":0},{"_id":"source/img/shaoxing/贺知章的祠.jpg","path":"img/shaoxing/贺知章的祠.jpg","modified":0,"renderable":0},{"_id":"source/img/shaoxing/钗头凤墙.jpg","path":"img/shaoxing/钗头凤墙.jpg","modified":0,"renderable":0},{"_id":"source/img/shaoxing/路上遇见的塔.jpg","path":"img/shaoxing/路上遇见的塔.jpg","modified":0,"renderable":0},{"_id":"source/img/zatan/月亮.jpg","path":"img/zatan/月亮.jpg","modified":0,"renderable":0},{"_id":"source/img/shaoxing/鲁迅木刻.jpg","path":"img/shaoxing/鲁迅木刻.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"e6a167d5abbd3236fcda934ae45d43d2677940ae","modified":1724941034206},{"_id":"source/_drafts/c-learning.md","hash":"d988b64da12dc331288c6d6be89619fb7e57b686","modified":1725631347685},{"_id":"source/_drafts/关于学长组工作的一点碎碎念.md","hash":"201f511c0edb02679a809de300dd36f033cc0ac2","modified":1725631347685},{"_id":"source/_posts/git-use.md","hash":"de2ab085e62c0e85b963041182f5b967950d375b","modified":1726590912784},{"_id":"source/_posts/makefile.md","hash":"48326c8d197589f1c94c482295c1bd79abb78715","modified":1726709430381},{"_id":"source/_posts/杂谈-中秋.md","hash":"16f5b0b2e769319c8243c5dda377a4226eea7853","modified":1726620202957},{"_id":"source/_posts/绍兴一日游.md","hash":"1f797b448aa8345b845115ac54aa9c9b6784b2c7","modified":1725631347685},{"_id":"source/_posts/test.md","hash":"a6a2c2b1c2ebd6331aec17e37bb6c6f2bafd7145","modified":1726709430381},{"_id":"source/categories/index.md","hash":"ae3fc8f24436008ccaa595c3cc6f55601136728e","modified":1726709430381},{"_id":"source/about/index.md","hash":"a4403ded98c8363d1e294907f02f3f46f5187ff6","modified":1726709430381},{"_id":"source/img/favicon.ico","hash":"ad4d8eb44909c162c70c0e30092b22fdbf24c268","modified":1724807264000},{"_id":"source/tags/index.md","hash":"60052d163daec2d077ca3ed6397b21629ff6d461","modified":1726709430491},{"_id":"source/img/gituse/branches.png","hash":"a0c04bde5c9bf190ef4ee17bcfcd200ab2c7819c","modified":1725631347685},{"_id":"source/img/weixin.jpg","hash":"bc43af09f357111de3673c66193e25f4a9714b29","modified":1724847335466},{"_id":"source/img/shaoxing/插图之十二.jpg","hash":"3a87346006113c9989ce7ee25aeacf771f287a63","modified":1725088189865},{"_id":"source/img/zatan/月亮.jpg","hash":"c26b571bd107f7fe6a330b71fc6f956b0c5d524c","modified":1726590912792},{"_id":"source/img/dahe1.png","hash":"f724f709dc754f93563e5ab7ad1180c5157fc254","modified":1724773485630},{"_id":"source/img/shaoxing/鲁迅木刻.jpg","hash":"b60c9897af19dd17fe62868ddc7edaf4be9421c7","modified":1725086484764},{"_id":"source/img/shaoxing/插图21.jpg","hash":"8235ffa42d71999302423da76eb31f5d69414ebf","modified":1725088670457},{"_id":"source/img/shaoxing/周恩来回绍兴.jpg","hash":"2d6bd9349ed1c96cf81bf32c50053e3a209c6629","modified":1725086524771},{"_id":"source/img/shaoxing/插图32.jpg","hash":"150a2d5f2ed89be4a2794d120d3f69a95dea93d3","modified":1725088678869},{"_id":"source/img/shaoxing/绍兴.jpg","hash":"7e40e1e1af4fda3ed096e22741efbf92380a8fbe","modified":1725087830506},{"_id":"source/img/shaoxing/贺知章的祠.jpg","hash":"50d57d5dca9e2cb8e51e0aa499b2b62903cf2174","modified":1725086513242},{"_id":"source/img/shaoxing/插图xls.jpg","hash":"a58d85090d2ca1400be306b2c82f73637f33b9d1","modified":1725088801974},{"_id":"source/img/shaoxing/藏书票.jpg","hash":"788588413c8dc15e331c6fdff429457c13961ce7","modified":1725089319523},{"_id":"source/img/shaoxing/路上遇见的塔.jpg","hash":"59eae20624e3635d97c6a8256934982380ea9d01","modified":1725086497958},{"_id":"source/img/shaoxing/明信片.jpg","hash":"62561b4ee40659936685016f8c8a6534b343d823","modified":1725089572889},{"_id":"source/img/shaoxing/钗头凤墙.jpg","hash":"0f6e8f6e57a32b2e54ab32588ad817e1de8cb23e","modified":1725086550644}],"Category":[{"name":"others","_id":"cm18m4j4i00078kd0731mdt7w"},{"name":"tools","_id":"cm18m4j4n000c8kd0cwf3a6l7"},{"name":"daily life","_id":"cm18m4j4r000j8kd0cygs7das"}],"Data":[],"Page":[{"title":"about","date":"2024-08-29T08:08:26.000Z","_content":"\n大家好，我是12321ua，现在还是一名学生，欢迎来到我的博客！\n\n现在我还没想好怎么介绍自己😢\n\n希望以后能多多补充吧。","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-08-29 16:08:26\n---\n\n大家好，我是12321ua，现在还是一名学生，欢迎来到我的博客！\n\n现在我还没想好怎么介绍自己😢\n\n希望以后能多多补充吧。","updated":"2024-09-19T01:30:30.381Z","path":"about/index.html","_id":"cm18m4j4500008kd02hj7cp35","comments":1,"layout":"page","content":"<p>大家好，我是12321ua，现在还是一名学生，欢迎来到我的博客！</p>\n<p>现在我还没想好怎么介绍自己😢</p>\n<p>希望以后能多多补充吧。</p>\n","excerpt":"","more":"<p>大家好，我是12321ua，现在还是一名学生，欢迎来到我的博客！</p>\n<p>现在我还没想好怎么介绍自己😢</p>\n<p>希望以后能多多补充吧。</p>\n"},{"title":"categories","date":"2024-08-29T13:46:44.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2024-08-29 21:46:44\n---\n","updated":"2024-09-19T01:30:30.381Z","path":"categories/index.html","_id":"cm18m4j4800018kd01sm4b1pc","comments":1,"layout":"page","content":"","excerpt":"","more":""},{"title":"tags","date":"2024-08-29T13:49:32.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-08-29 21:49:32\n---\n","updated":"2024-09-19T01:30:30.491Z","path":"tags/index.html","_id":"cm18m4j4d00038kd05461eok0","comments":1,"layout":"page","content":"","excerpt":"","more":""}],"Post":[{"title":"c++ learning(1)","_content":"\n我一直对C++挺好奇的，但是一直没有时间系统的学习。最近正好有空也恰好我很缺乏这种扎实的基础只是，所以打算花时间系统的学习一下，也就是打算尽可能地啃完《C++ Primer Plus》这本书。当然，这本书内容十分丰富，所以这可能不是一个短短几天能完成的事，但是我会尽量按计划完成。\n\n## 第一章 预备知识\n\n- C++在C的基础上添加了面向对象的特性和泛型编程的方法。\n- C++的'++'源自C的自增符号，表示的是C++是C的扩展版本。\n- C语言是面向过程的语言。C程序有两个原则性设计，一个是结构化编程（即for结构、while结构、if-else语句等等），这使得程序有了很好的整体结构与可读性；另一个是自顶向下的设计，即将大型程序分解成小型、更容易解决的子程序，从而提高程序的可维护性与可扩展性，这是面向过程的一种设计。\n  \n  但程序是由数据和算法同时构成的，C++即是一种面向对象也就是数据的语言。面向对象编程的基本思想是将数据和算法封装成一个个对象，每个对象都有自己的属性和方法，通过调用这些方法来实现对数据的操作。这种设计使得程序更加灵活、更易于维护、更易于扩展。这在某种意义上可以说是自下向上的一种设计。\n\n## 第二章 开始学习C++\n\n","source":"_drafts/c-learning.md","raw":"---\ntitle: c++ learning(1)\ntags:\n---\n\n我一直对C++挺好奇的，但是一直没有时间系统的学习。最近正好有空也恰好我很缺乏这种扎实的基础只是，所以打算花时间系统的学习一下，也就是打算尽可能地啃完《C++ Primer Plus》这本书。当然，这本书内容十分丰富，所以这可能不是一个短短几天能完成的事，但是我会尽量按计划完成。\n\n## 第一章 预备知识\n\n- C++在C的基础上添加了面向对象的特性和泛型编程的方法。\n- C++的'++'源自C的自增符号，表示的是C++是C的扩展版本。\n- C语言是面向过程的语言。C程序有两个原则性设计，一个是结构化编程（即for结构、while结构、if-else语句等等），这使得程序有了很好的整体结构与可读性；另一个是自顶向下的设计，即将大型程序分解成小型、更容易解决的子程序，从而提高程序的可维护性与可扩展性，这是面向过程的一种设计。\n  \n  但程序是由数据和算法同时构成的，C++即是一种面向对象也就是数据的语言。面向对象编程的基本思想是将数据和算法封装成一个个对象，每个对象都有自己的属性和方法，通过调用这些方法来实现对数据的操作。这种设计使得程序更加灵活、更易于维护、更易于扩展。这在某种意义上可以说是自下向上的一种设计。\n\n## 第二章 开始学习C++\n\n","slug":"c-learning","published":0,"date":"2024-09-19T01:24:42.188Z","updated":"2024-09-06T14:02:27.685Z","comments":1,"layout":"post","photos":[],"_id":"cm18m4j4a00028kd01ulz616a","content":"<p>我一直对C++挺好奇的，但是一直没有时间系统的学习。最近正好有空也恰好我很缺乏这种扎实的基础只是，所以打算花时间系统的学习一下，也就是打算尽可能地啃完《C++ Primer Plus》这本书。当然，这本书内容十分丰富，所以这可能不是一个短短几天能完成的事，但是我会尽量按计划完成。</p>\n<h2 id=\"第一章-预备知识\"><a href=\"#第一章-预备知识\" class=\"headerlink\" title=\"第一章 预备知识\"></a>第一章 预备知识</h2><ul>\n<li><p>C++在C的基础上添加了面向对象的特性和泛型编程的方法。</p>\n</li>\n<li><p>C++的’++’源自C的自增符号，表示的是C++是C的扩展版本。</p>\n</li>\n<li><p>C语言是面向过程的语言。C程序有两个原则性设计，一个是结构化编程（即for结构、while结构、if-else语句等等），这使得程序有了很好的整体结构与可读性；另一个是自顶向下的设计，即将大型程序分解成小型、更容易解决的子程序，从而提高程序的可维护性与可扩展性，这是面向过程的一种设计。</p>\n<p>但程序是由数据和算法同时构成的，C++即是一种面向对象也就是数据的语言。面向对象编程的基本思想是将数据和算法封装成一个个对象，每个对象都有自己的属性和方法，通过调用这些方法来实现对数据的操作。这种设计使得程序更加灵活、更易于维护、更易于扩展。这在某种意义上可以说是自下向上的一种设计。</p>\n</li>\n</ul>\n<h2 id=\"第二章-开始学习C\"><a href=\"#第二章-开始学习C\" class=\"headerlink\" title=\"第二章 开始学习C++\"></a>第二章 开始学习C++</h2>","excerpt":"","more":"<p>我一直对C++挺好奇的，但是一直没有时间系统的学习。最近正好有空也恰好我很缺乏这种扎实的基础只是，所以打算花时间系统的学习一下，也就是打算尽可能地啃完《C++ Primer Plus》这本书。当然，这本书内容十分丰富，所以这可能不是一个短短几天能完成的事，但是我会尽量按计划完成。</p>\n<h2 id=\"第一章-预备知识\"><a href=\"#第一章-预备知识\" class=\"headerlink\" title=\"第一章 预备知识\"></a>第一章 预备知识</h2><ul>\n<li><p>C++在C的基础上添加了面向对象的特性和泛型编程的方法。</p>\n</li>\n<li><p>C++的’++’源自C的自增符号，表示的是C++是C的扩展版本。</p>\n</li>\n<li><p>C语言是面向过程的语言。C程序有两个原则性设计，一个是结构化编程（即for结构、while结构、if-else语句等等），这使得程序有了很好的整体结构与可读性；另一个是自顶向下的设计，即将大型程序分解成小型、更容易解决的子程序，从而提高程序的可维护性与可扩展性，这是面向过程的一种设计。</p>\n<p>但程序是由数据和算法同时构成的，C++即是一种面向对象也就是数据的语言。面向对象编程的基本思想是将数据和算法封装成一个个对象，每个对象都有自己的属性和方法，通过调用这些方法来实现对数据的操作。这种设计使得程序更加灵活、更易于维护、更易于扩展。这在某种意义上可以说是自下向上的一种设计。</p>\n</li>\n</ul>\n<h2 id=\"第二章-开始学习C\"><a href=\"#第二章-开始学习C\" class=\"headerlink\" title=\"第二章 开始学习C++\"></a>第二章 开始学习C++</h2>"},{"title":"关于学长组工作的一点碎碎念","_content":"\n我最初为什么想要进学长组呢？其实最初的想法相当自私，只是觉得自己大一什么工作都没做，想要试着做些事情，也就热血上头填了报名表。但填了报名表≠报名，我当时也犹豫了好久，最后因为身边各种因素驱动，也是到了报名截止的最后一天才交上报名表。\n\n现在总结这一阶段工作以及之前的准备，也有了不少教训，再在98上搜索一番发现好像没有太多类似的文章，所以才着手写下这篇文章。\n\n另外在最前面声名，这篇文章不是为了控诉或者吐槽，我尽量不带情绪的书写，但有些地方难免会流露一些感情，还请见谅。\n\n## 一. 关于我个人学长组工作的阶段总结\n\n学长组工作归结下来我觉得最主要可以分成三个方面：\n\n- 迎新，具体来说是在报道阶段担任志愿者，在始业教育阶段适当引导、帮助熟悉校园\n- 班级组建，主要是新生群建立、班团组建、破冰活动三个事项\n- 学习规划指导，具体来说即在选课、选专业两方面分享经验提供指导\n\n所以我也就这三个方面进行展开\n\n### 1. 迎新\n\n迎新工作今年主要都是由学院和连队组织。\n\n担任志愿者是在学长组工作群内自主填表报名。我填的是在8.17号下午的西三门做志愿者。但在西三门，由于门卫也在，且职责重合的部分很多，所以绝大多数新生都是由门卫负责引导（即驾车进入学校的新生），只有少部分步行进校的学生需要我们指引（一个下午只有三位）。\n\n另外，今年由于军训的新变化，始业教育由连队组织。学长组所做的工作仅有带路参加学院的新生大会和学校的新生考试。其他如参观校史馆、体检、参加学校新生大会等均由连队组织。\n\n总结来说，我所做的工作仅仅是完成了自己应做的工作，可以说是无功无过。\n\n### 2. 班级组建\n\n这一部分的三个事项负责组织活动的主要有三个主体：学长组、兼职辅导员以及班主任。但这三个主体所承担的工作是不清晰的，究竟由谁牵头也是不明确的。\n\n就以我们班为例，在新生群组建，兼辅在我们学长组找不到新生的情况下拉了钉钉群；QQ群兼辅和班主任都没有加入；微信群加入了我们组建的，但并没有站出来主持。在班团组建，文件上所写是竞选班委由兼辅主持，但实际上，由于班主任和我们对这方面都不熟悉，学长组几乎接下了整个的锅😢。在破冰活动，由于连队活动排得很满，而且我们也没有意识到学院新生大会前稍纵即逝的机会，也就没有在军训前组织。\n\n","source":"_drafts/关于学长组工作的一点碎碎念.md","raw":"---\ntitle: 关于学长组工作的一点碎碎念\ntags:\n---\n\n我最初为什么想要进学长组呢？其实最初的想法相当自私，只是觉得自己大一什么工作都没做，想要试着做些事情，也就热血上头填了报名表。但填了报名表≠报名，我当时也犹豫了好久，最后因为身边各种因素驱动，也是到了报名截止的最后一天才交上报名表。\n\n现在总结这一阶段工作以及之前的准备，也有了不少教训，再在98上搜索一番发现好像没有太多类似的文章，所以才着手写下这篇文章。\n\n另外在最前面声名，这篇文章不是为了控诉或者吐槽，我尽量不带情绪的书写，但有些地方难免会流露一些感情，还请见谅。\n\n## 一. 关于我个人学长组工作的阶段总结\n\n学长组工作归结下来我觉得最主要可以分成三个方面：\n\n- 迎新，具体来说是在报道阶段担任志愿者，在始业教育阶段适当引导、帮助熟悉校园\n- 班级组建，主要是新生群建立、班团组建、破冰活动三个事项\n- 学习规划指导，具体来说即在选课、选专业两方面分享经验提供指导\n\n所以我也就这三个方面进行展开\n\n### 1. 迎新\n\n迎新工作今年主要都是由学院和连队组织。\n\n担任志愿者是在学长组工作群内自主填表报名。我填的是在8.17号下午的西三门做志愿者。但在西三门，由于门卫也在，且职责重合的部分很多，所以绝大多数新生都是由门卫负责引导（即驾车进入学校的新生），只有少部分步行进校的学生需要我们指引（一个下午只有三位）。\n\n另外，今年由于军训的新变化，始业教育由连队组织。学长组所做的工作仅有带路参加学院的新生大会和学校的新生考试。其他如参观校史馆、体检、参加学校新生大会等均由连队组织。\n\n总结来说，我所做的工作仅仅是完成了自己应做的工作，可以说是无功无过。\n\n### 2. 班级组建\n\n这一部分的三个事项负责组织活动的主要有三个主体：学长组、兼职辅导员以及班主任。但这三个主体所承担的工作是不清晰的，究竟由谁牵头也是不明确的。\n\n就以我们班为例，在新生群组建，兼辅在我们学长组找不到新生的情况下拉了钉钉群；QQ群兼辅和班主任都没有加入；微信群加入了我们组建的，但并没有站出来主持。在班团组建，文件上所写是竞选班委由兼辅主持，但实际上，由于班主任和我们对这方面都不熟悉，学长组几乎接下了整个的锅😢。在破冰活动，由于连队活动排得很满，而且我们也没有意识到学院新生大会前稍纵即逝的机会，也就没有在军训前组织。\n\n","slug":"关于学长组工作的一点碎碎念","published":0,"date":"2024-09-19T01:24:42.191Z","updated":"2024-09-06T14:02:27.685Z","comments":1,"layout":"post","photos":[],"_id":"cm18m4j4e00048kd0342jainf","content":"<p>我最初为什么想要进学长组呢？其实最初的想法相当自私，只是觉得自己大一什么工作都没做，想要试着做些事情，也就热血上头填了报名表。但填了报名表≠报名，我当时也犹豫了好久，最后因为身边各种因素驱动，也是到了报名截止的最后一天才交上报名表。</p>\n<p>现在总结这一阶段工作以及之前的准备，也有了不少教训，再在98上搜索一番发现好像没有太多类似的文章，所以才着手写下这篇文章。</p>\n<p>另外在最前面声名，这篇文章不是为了控诉或者吐槽，我尽量不带情绪的书写，但有些地方难免会流露一些感情，还请见谅。</p>\n<h2 id=\"一-关于我个人学长组工作的阶段总结\"><a href=\"#一-关于我个人学长组工作的阶段总结\" class=\"headerlink\" title=\"一. 关于我个人学长组工作的阶段总结\"></a>一. 关于我个人学长组工作的阶段总结</h2><p>学长组工作归结下来我觉得最主要可以分成三个方面：</p>\n<ul>\n<li>迎新，具体来说是在报道阶段担任志愿者，在始业教育阶段适当引导、帮助熟悉校园</li>\n<li>班级组建，主要是新生群建立、班团组建、破冰活动三个事项</li>\n<li>学习规划指导，具体来说即在选课、选专业两方面分享经验提供指导</li>\n</ul>\n<p>所以我也就这三个方面进行展开</p>\n<h3 id=\"1-迎新\"><a href=\"#1-迎新\" class=\"headerlink\" title=\"1. 迎新\"></a>1. 迎新</h3><p>迎新工作今年主要都是由学院和连队组织。</p>\n<p>担任志愿者是在学长组工作群内自主填表报名。我填的是在8.17号下午的西三门做志愿者。但在西三门，由于门卫也在，且职责重合的部分很多，所以绝大多数新生都是由门卫负责引导（即驾车进入学校的新生），只有少部分步行进校的学生需要我们指引（一个下午只有三位）。</p>\n<p>另外，今年由于军训的新变化，始业教育由连队组织。学长组所做的工作仅有带路参加学院的新生大会和学校的新生考试。其他如参观校史馆、体检、参加学校新生大会等均由连队组织。</p>\n<p>总结来说，我所做的工作仅仅是完成了自己应做的工作，可以说是无功无过。</p>\n<h3 id=\"2-班级组建\"><a href=\"#2-班级组建\" class=\"headerlink\" title=\"2. 班级组建\"></a>2. 班级组建</h3><p>这一部分的三个事项负责组织活动的主要有三个主体：学长组、兼职辅导员以及班主任。但这三个主体所承担的工作是不清晰的，究竟由谁牵头也是不明确的。</p>\n<p>就以我们班为例，在新生群组建，兼辅在我们学长组找不到新生的情况下拉了钉钉群；QQ群兼辅和班主任都没有加入；微信群加入了我们组建的，但并没有站出来主持。在班团组建，文件上所写是竞选班委由兼辅主持，但实际上，由于班主任和我们对这方面都不熟悉，学长组几乎接下了整个的锅😢。在破冰活动，由于连队活动排得很满，而且我们也没有意识到学院新生大会前稍纵即逝的机会，也就没有在军训前组织。</p>\n","excerpt":"","more":"<p>我最初为什么想要进学长组呢？其实最初的想法相当自私，只是觉得自己大一什么工作都没做，想要试着做些事情，也就热血上头填了报名表。但填了报名表≠报名，我当时也犹豫了好久，最后因为身边各种因素驱动，也是到了报名截止的最后一天才交上报名表。</p>\n<p>现在总结这一阶段工作以及之前的准备，也有了不少教训，再在98上搜索一番发现好像没有太多类似的文章，所以才着手写下这篇文章。</p>\n<p>另外在最前面声名，这篇文章不是为了控诉或者吐槽，我尽量不带情绪的书写，但有些地方难免会流露一些感情，还请见谅。</p>\n<h2 id=\"一-关于我个人学长组工作的阶段总结\"><a href=\"#一-关于我个人学长组工作的阶段总结\" class=\"headerlink\" title=\"一. 关于我个人学长组工作的阶段总结\"></a>一. 关于我个人学长组工作的阶段总结</h2><p>学长组工作归结下来我觉得最主要可以分成三个方面：</p>\n<ul>\n<li>迎新，具体来说是在报道阶段担任志愿者，在始业教育阶段适当引导、帮助熟悉校园</li>\n<li>班级组建，主要是新生群建立、班团组建、破冰活动三个事项</li>\n<li>学习规划指导，具体来说即在选课、选专业两方面分享经验提供指导</li>\n</ul>\n<p>所以我也就这三个方面进行展开</p>\n<h3 id=\"1-迎新\"><a href=\"#1-迎新\" class=\"headerlink\" title=\"1. 迎新\"></a>1. 迎新</h3><p>迎新工作今年主要都是由学院和连队组织。</p>\n<p>担任志愿者是在学长组工作群内自主填表报名。我填的是在8.17号下午的西三门做志愿者。但在西三门，由于门卫也在，且职责重合的部分很多，所以绝大多数新生都是由门卫负责引导（即驾车进入学校的新生），只有少部分步行进校的学生需要我们指引（一个下午只有三位）。</p>\n<p>另外，今年由于军训的新变化，始业教育由连队组织。学长组所做的工作仅有带路参加学院的新生大会和学校的新生考试。其他如参观校史馆、体检、参加学校新生大会等均由连队组织。</p>\n<p>总结来说，我所做的工作仅仅是完成了自己应做的工作，可以说是无功无过。</p>\n<h3 id=\"2-班级组建\"><a href=\"#2-班级组建\" class=\"headerlink\" title=\"2. 班级组建\"></a>2. 班级组建</h3><p>这一部分的三个事项负责组织活动的主要有三个主体：学长组、兼职辅导员以及班主任。但这三个主体所承担的工作是不清晰的，究竟由谁牵头也是不明确的。</p>\n<p>就以我们班为例，在新生群组建，兼辅在我们学长组找不到新生的情况下拉了钉钉群；QQ群兼辅和班主任都没有加入；微信群加入了我们组建的，但并没有站出来主持。在班团组建，文件上所写是竞选班委由兼辅主持，但实际上，由于班主任和我们对这方面都不熟悉，学长组几乎接下了整个的锅😢。在破冰活动，由于连队活动排得很满，而且我们也没有意识到学院新生大会前稍纵即逝的机会，也就没有在军训前组织。</p>\n"},{"title":"test","date":"2024-08-28T05:46:48.000Z","excerpt":"测试帖子，用来测试博客的基本功能。","_content":"\n这是个测试帖子，用来测试博客的基本功能。\n\n## 1.笔记功能\n\n语法如下：\n\n```\n{% notel [颜色] [可选: 自定义图标] [标题] %}\n内容\n支持换行\n{% endnotel %}\n```\n\n例如：\n\n{% notel default fa-info 信息 %}\n换行测试\n换行测试\n换行测试\n{% endnotel %}\n\n{% notel blue 提示 %}\n换行测试\n换行测试\n换行测试\n{% endnotel %}\n\n## 2. 按钮功能\n\n语法如下：\n\n```\n{% btn [颜色] [可选: 自定义图标] [标题] [链接] %}\n# 不同板块除了btn，中间可用::分隔\n```\n\n{% btn regular::示例博客::https://12321ua.cn ::fa-solid fa-play-circle %}\n\n## 3. Folding 折叠模块\n\n语法如下：\n\n```\n{% folding [颜色]::[标题] %}\n内容\n支持换行\n{% endfolding %}\n```\n\n例如：\n\n{% folding 发疯，不要点开啊！！！！ %}\n啊啊啊啊啊啊啊啊！！！！！！\n{% endfolding %}\n\n颜色列表：\n\n```\nyellow, blue, green, red, orange, pink, cyan, white, black, gray\n```\n\n## 4. 选项卡\n\n语法如下：\n\n```\n{% tabs 页面内不重复的ID %}\n<!-- tab 栏目1名称 -->\n内容\n<!-- endtab -->\n<!-- tab 栏目2名称 -->\n内容\n<!-- endtab -->\n{% endtabs %}\n```\n\n其中，页面内不重复的ID 为你为这个选项卡创建的唯一标识符，可以随便取。\n\n每个栏目内容使用 <!-- tab 栏目名称 --> 和 <!-- endtab --> 来定义。\n\n比如：\n\n{% tabs First unique name %}\n<!-- tab First Tab-->\n**This is Tab 1.**\n<!-- endtab -->\n \n<!-- tab Second Tab-->\n**This is Tab 2.**\n \nThis is Tab 2.\n<!-- endtab -->\n \n<!-- tab Third Tab-->\n**This is Tab 3.**\n \nThis is Tab 3.\n \nThis is Tab 3.\n<!-- endtab -->\n{% endtabs %}","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2024-08-28 13:46:48\ntags: [test]\nexcerpt : \"测试帖子，用来测试博客的基本功能。\"\ncategories: [\"others\"]\n---\n\n这是个测试帖子，用来测试博客的基本功能。\n\n## 1.笔记功能\n\n语法如下：\n\n```\n{% notel [颜色] [可选: 自定义图标] [标题] %}\n内容\n支持换行\n{% endnotel %}\n```\n\n例如：\n\n{% notel default fa-info 信息 %}\n换行测试\n换行测试\n换行测试\n{% endnotel %}\n\n{% notel blue 提示 %}\n换行测试\n换行测试\n换行测试\n{% endnotel %}\n\n## 2. 按钮功能\n\n语法如下：\n\n```\n{% btn [颜色] [可选: 自定义图标] [标题] [链接] %}\n# 不同板块除了btn，中间可用::分隔\n```\n\n{% btn regular::示例博客::https://12321ua.cn ::fa-solid fa-play-circle %}\n\n## 3. Folding 折叠模块\n\n语法如下：\n\n```\n{% folding [颜色]::[标题] %}\n内容\n支持换行\n{% endfolding %}\n```\n\n例如：\n\n{% folding 发疯，不要点开啊！！！！ %}\n啊啊啊啊啊啊啊啊！！！！！！\n{% endfolding %}\n\n颜色列表：\n\n```\nyellow, blue, green, red, orange, pink, cyan, white, black, gray\n```\n\n## 4. 选项卡\n\n语法如下：\n\n```\n{% tabs 页面内不重复的ID %}\n<!-- tab 栏目1名称 -->\n内容\n<!-- endtab -->\n<!-- tab 栏目2名称 -->\n内容\n<!-- endtab -->\n{% endtabs %}\n```\n\n其中，页面内不重复的ID 为你为这个选项卡创建的唯一标识符，可以随便取。\n\n每个栏目内容使用 <!-- tab 栏目名称 --> 和 <!-- endtab --> 来定义。\n\n比如：\n\n{% tabs First unique name %}\n<!-- tab First Tab-->\n**This is Tab 1.**\n<!-- endtab -->\n \n<!-- tab Second Tab-->\n**This is Tab 2.**\n \nThis is Tab 2.\n<!-- endtab -->\n \n<!-- tab Third Tab-->\n**This is Tab 3.**\n \nThis is Tab 3.\n \nThis is Tab 3.\n<!-- endtab -->\n{% endtabs %}","slug":"test","published":1,"updated":"2024-09-19T01:30:30.381Z","_id":"cm18m4j4g00058kd0h1o0fynq","comments":1,"layout":"post","photos":[]},{"title":"git命令行的使用","date":"2024-09-06T13:46:56.000Z","excerpt":"git命令行的基本用法，待补充...","_content":"\n\n{% folding green::写文的目的%}\n虽然一直在使用github desktop，但感觉还是有必要了解一下git命令行的基本用法。以前也整理过一次，这次拿出来复习一下，并做了一些补充。\n另外由于github desktop非常“傻瓜”，所以这里也不过多说明。\n{% endfolding %}\n\n## git命令行的基础用法\n\n### 添加文件\n\n1. 使用命令`git add <file>`，注意，可反复多次使用，添加多个文件；\n  \n  这一命令将文件添加到暂存区\n  \n1. 使用命令`git commit -m <message>`，完成。\n  \n  这一命令将暂存区的文件提交到仓库\n  \n  `-m`后添加的是本次提交的说明，可以是任意内容，但要有意义\n  \n\n- 解释：git的版本库有两个很重要的板块。一个是stage（或者叫index），称作暂存区。另一个是master，是自动创建的。git add就是将文件提交到stage，然后通过git commit，将stage中的内容全部提交到master中，并清空stage。\n  \n- git保存的是修改而不是文件\n  \n\n### 查看修改\n\n1. `git status`查看仓库当前的状态\n  \n2. `git diff <file>`比较文件的不同（若没有<file>则比较当前目录全部）\n  \n  - 尚未缓存的改动：`git diff`\n  - 查看已缓存的改动： `git diff --cached`或`git diff --staged`\n  - 查看已缓存的与未缓存的所有改动：`git diff HEAD`\n  - 显示摘要而非整个 diff：`git diff --stat`\n  - 显示不同分支之间的差异：`git diff [first-branch]...[second-branch]`\n\n### 版本回退\n\n三个概念：\n\n- HEAD：分支的指针，指向当前branch最顶端的一个commit，该分支上一次commit后的节点\n  \n- stage（暂存区）：是一堆将在下一次commit中提交的文件，提交之后它就是 HEAD的父节点. 一般指git add添加的文件\n  \n- Working Copy（工作副本）：指当前工作目录下的文件，一般指，有修改，没有 git add，没有 git commit的文件\n  \n\n相关命令：\n\n1. `git log`显示从最近到最远的提交日志\n  \n  `--oneline`开启简洁模式\n  \n  `--graph`可以将版本显示图形化（可以展现不同的分支情况）\n  \n2. `git reset --hard/soft/mixed <版本号>`回退版本\n  \n  示例：`git reset --hard HEAD^` 回退到上一个版本（包括本地文件）\n  \n  **补充说明**\n  \n  1. 命令参数：(github desktop因为没有暂存区的概念，所以回退时只回退了HEAD)\n    \n    - `--hard`：HEAD & stage & working copy同时改变到你要回退到的版本；\n      \n    - `--mixed`（默认）：改变HEAD和stage到回退的版本，本地文件不改变；\n      \n    - `--soft`：只将HEAD回退到指定版本\n      \n  2. 版本号简写：\n    \n    `HEAD`指向当前版本，可以用`HEAD^`表示上个版本，`HEAD^^`表示上上个版本，以此类推，也可以用`HEAD~n`表示往上n个版本\n    \n  3. 每一个版本都有专门的版本号`commit id`，这是由一串很长的数字表示（哈希值），表示时可以不用写全，只需要一部分（但也不要太少，不然可能会有多个符合目标）\n    \n3. `HEAD`回退后，后续版本号无法通过`git log`查询，但可以通过`git reflog`查看之前的每一个命令，该命令可以显示每一个命令所处版本的版本号\n  \n\n### 撤销修改\n\n1. 情形1：修改但还没有提交到暂存区\n  \n  `git checkout -- <file>`返回到上一次版本修改\n  \n2. 情形2：修改提交到暂存区，但还没有上传到master\n  \n  `git reset HEAD <file>`清空暂存区（即是使用默认的`mixed`模式）\n  \n3. 情形3：修改上传\n  \n  回退版本（但如果上传到远程库，则无法修改了...）\n  \n\n### 删除文件\n\n命令`git rm`用于删除一个文件。\n如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。\n\n### 新建分支\n\n在git中HEAD指向master，master指向版本，master是默认的一个指针，在操作时，创建一个新的指针，最后再合并，可以使操作更加安全\n\n1. 查看全部分支：`git branch``-r`：显示远端；`-a`显示本地和远端\n2. 创建分支：`git branch <new branch name>`\n3. 切换分支：`git switch <name>`\n4. 创建+切换分支：`git switch -c <name>`\n5. 合并某分支到当前分支：`git merge <name>`\n6. 删除分支：`git branch -d <name>``-D`则是强制删除\n\n补充：\n\n当切换分支时，想保存当前分支尚未提交的内容，可以用`git stash`命令，重新切换回当前分支后，再用`git stash pop`命令恢复。\n\ngithub desktop也有这个功能，在侧栏右键即可看见这一选项。\n\n### 分支合并\n\n1. 冲突分支的合并：必须手动在文本中解决冲突，才能继续执行合并提交\n  \n2. 关闭`fast forward`模式的合并：`git merge -no-ff <name>`\n  \n  也可以通过`-m \"注释\"`添加说明\n  \n3. 查看分支合并图：`git log --gragh`\n  \n4. 分支策略\n  \n  master：主分支，稳定的版本\n  dev：开发分支，修改的版本\n  自定义分支：个人工作的版本\n  \n  每个人将自己的分支合并到dev，dev再合并到master\n\n  ![branches](/img/gituse/branches.png)\n\n### 标签管理：\n\n- 命令`git tag <tagname> <commit id>`用于新建一个标签，默认为HEAD，也可以指定一个commit id(tagname比如v1.0)；\n- 命令`git tag -a <tagname> -m \"...\"`可以指定标签信息；\n- 命令`git tag`可以查看所有标签;\n- 命令`git push origin <tagname>`可以推送一个本地标签；\n- 命令`git push origin --tags`可以推送全部未推送过的本地标签；\n- 命令`git tag -d <tagname>`可以删除一个本地标签；\n- 命令`git push origin :refs/tags/<tagname>`可以删除一个远程标签\n\n\n","source":"_posts/git-use.md","raw":"---\ntitle: git命令行的使用\ndate: 2024-09-06 21:46:56\ntags: [\"git\"]\nexcerpt : \"git命令行的基本用法，待补充...\"\ncategories: [\"tools\"]\n---\n\n\n{% folding green::写文的目的%}\n虽然一直在使用github desktop，但感觉还是有必要了解一下git命令行的基本用法。以前也整理过一次，这次拿出来复习一下，并做了一些补充。\n另外由于github desktop非常“傻瓜”，所以这里也不过多说明。\n{% endfolding %}\n\n## git命令行的基础用法\n\n### 添加文件\n\n1. 使用命令`git add <file>`，注意，可反复多次使用，添加多个文件；\n  \n  这一命令将文件添加到暂存区\n  \n1. 使用命令`git commit -m <message>`，完成。\n  \n  这一命令将暂存区的文件提交到仓库\n  \n  `-m`后添加的是本次提交的说明，可以是任意内容，但要有意义\n  \n\n- 解释：git的版本库有两个很重要的板块。一个是stage（或者叫index），称作暂存区。另一个是master，是自动创建的。git add就是将文件提交到stage，然后通过git commit，将stage中的内容全部提交到master中，并清空stage。\n  \n- git保存的是修改而不是文件\n  \n\n### 查看修改\n\n1. `git status`查看仓库当前的状态\n  \n2. `git diff <file>`比较文件的不同（若没有<file>则比较当前目录全部）\n  \n  - 尚未缓存的改动：`git diff`\n  - 查看已缓存的改动： `git diff --cached`或`git diff --staged`\n  - 查看已缓存的与未缓存的所有改动：`git diff HEAD`\n  - 显示摘要而非整个 diff：`git diff --stat`\n  - 显示不同分支之间的差异：`git diff [first-branch]...[second-branch]`\n\n### 版本回退\n\n三个概念：\n\n- HEAD：分支的指针，指向当前branch最顶端的一个commit，该分支上一次commit后的节点\n  \n- stage（暂存区）：是一堆将在下一次commit中提交的文件，提交之后它就是 HEAD的父节点. 一般指git add添加的文件\n  \n- Working Copy（工作副本）：指当前工作目录下的文件，一般指，有修改，没有 git add，没有 git commit的文件\n  \n\n相关命令：\n\n1. `git log`显示从最近到最远的提交日志\n  \n  `--oneline`开启简洁模式\n  \n  `--graph`可以将版本显示图形化（可以展现不同的分支情况）\n  \n2. `git reset --hard/soft/mixed <版本号>`回退版本\n  \n  示例：`git reset --hard HEAD^` 回退到上一个版本（包括本地文件）\n  \n  **补充说明**\n  \n  1. 命令参数：(github desktop因为没有暂存区的概念，所以回退时只回退了HEAD)\n    \n    - `--hard`：HEAD & stage & working copy同时改变到你要回退到的版本；\n      \n    - `--mixed`（默认）：改变HEAD和stage到回退的版本，本地文件不改变；\n      \n    - `--soft`：只将HEAD回退到指定版本\n      \n  2. 版本号简写：\n    \n    `HEAD`指向当前版本，可以用`HEAD^`表示上个版本，`HEAD^^`表示上上个版本，以此类推，也可以用`HEAD~n`表示往上n个版本\n    \n  3. 每一个版本都有专门的版本号`commit id`，这是由一串很长的数字表示（哈希值），表示时可以不用写全，只需要一部分（但也不要太少，不然可能会有多个符合目标）\n    \n3. `HEAD`回退后，后续版本号无法通过`git log`查询，但可以通过`git reflog`查看之前的每一个命令，该命令可以显示每一个命令所处版本的版本号\n  \n\n### 撤销修改\n\n1. 情形1：修改但还没有提交到暂存区\n  \n  `git checkout -- <file>`返回到上一次版本修改\n  \n2. 情形2：修改提交到暂存区，但还没有上传到master\n  \n  `git reset HEAD <file>`清空暂存区（即是使用默认的`mixed`模式）\n  \n3. 情形3：修改上传\n  \n  回退版本（但如果上传到远程库，则无法修改了...）\n  \n\n### 删除文件\n\n命令`git rm`用于删除一个文件。\n如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。\n\n### 新建分支\n\n在git中HEAD指向master，master指向版本，master是默认的一个指针，在操作时，创建一个新的指针，最后再合并，可以使操作更加安全\n\n1. 查看全部分支：`git branch``-r`：显示远端；`-a`显示本地和远端\n2. 创建分支：`git branch <new branch name>`\n3. 切换分支：`git switch <name>`\n4. 创建+切换分支：`git switch -c <name>`\n5. 合并某分支到当前分支：`git merge <name>`\n6. 删除分支：`git branch -d <name>``-D`则是强制删除\n\n补充：\n\n当切换分支时，想保存当前分支尚未提交的内容，可以用`git stash`命令，重新切换回当前分支后，再用`git stash pop`命令恢复。\n\ngithub desktop也有这个功能，在侧栏右键即可看见这一选项。\n\n### 分支合并\n\n1. 冲突分支的合并：必须手动在文本中解决冲突，才能继续执行合并提交\n  \n2. 关闭`fast forward`模式的合并：`git merge -no-ff <name>`\n  \n  也可以通过`-m \"注释\"`添加说明\n  \n3. 查看分支合并图：`git log --gragh`\n  \n4. 分支策略\n  \n  master：主分支，稳定的版本\n  dev：开发分支，修改的版本\n  自定义分支：个人工作的版本\n  \n  每个人将自己的分支合并到dev，dev再合并到master\n\n  ![branches](/img/gituse/branches.png)\n\n### 标签管理：\n\n- 命令`git tag <tagname> <commit id>`用于新建一个标签，默认为HEAD，也可以指定一个commit id(tagname比如v1.0)；\n- 命令`git tag -a <tagname> -m \"...\"`可以指定标签信息；\n- 命令`git tag`可以查看所有标签;\n- 命令`git push origin <tagname>`可以推送一个本地标签；\n- 命令`git push origin --tags`可以推送全部未推送过的本地标签；\n- 命令`git tag -d <tagname>`可以删除一个本地标签；\n- 命令`git push origin :refs/tags/<tagname>`可以删除一个远程标签\n\n\n","slug":"git-use","published":1,"updated":"2024-09-17T16:35:12.784Z","comments":1,"layout":"post","photos":[],"_id":"cm18m4j4h00068kd031v0h894"},{"title":"makefile","date":"2024-09-02T08:40:19.000Z","excerpt":"makefile的基本用法，待补充...","_content":"\n\n上一学年，我对C的编译过程都是一知半解，以至于我都不知道如何编译一个稍微复杂一点的项目（之前都是靠vs或者dev-c++自带的工具实现）。在暑期短学期时，稍微系统的学习了程序的编译过程，但对于如何编译一个项目还是不怎么了解，这几天闲着没什么事，便搜索了一下相关内容，发现了make这个工具，进而了解了makefile的基本用法，这里也是简单写写我认识的一个简单过程。\n\n## C程序编译过程\n\n一个C程序的编译过程大概可以分为以下几个步骤：\n\n1. 预处理：预处理器会把所有的#include、#define、#undef等预处理指令展开，并将其替换为实际的C代码，生成`.i`文件。\n2. 编译：编译器会把预处理后的代码编译成汇编代码，生成`.s`文件。\n3. 汇编：汇编器会把汇编代码转换成机器码,生成`.o`文件。\n4. 链接：链接器会把多个目标文件和库文件链接成一个可执行文件。\n\n由于这里不是介绍编译过程的教程，所以我就不详细介绍了。但简单来说，如果用gcc编译器，那么一个简单的项目可以用以下命令实现编译：\n\n```shell\ngcc -c source.c -o source.o\ngcc -c main.c -o main.o\ngcc source.o main.o -o program\n```\n\n{% folding green::另外一些可能用到的参数 %}\n新增头文件路径 : `-I<path>`\n识别`.c`文件头文件依赖：`-MM`\n编译过程中开启更多的警告：`-Wall` `-Wextra` \n编译过程中将所有警告视为报错：`-Werror`\n{% endfolding %}\n\n## makefile\n\n### 使用makefile想要达到的目的\n\nmakefile的主要作用是自动化编译过程，而如何自动化，我希望我每次输入`make`至少应该做到：\n\n1. 如果这个工程没有编译过，那么我们的所有C文件都要编译并被链接。\n2. 如果这个工程的某几个C文件被修改，那么我们只编译被修改的C文件，并链接目标程序。\n3. 如果这个工程的头文件被改变了，那么我们需要编译引用了这几个头文件的C文件，并链接目标程序。\n\n同时我还希望我编写的makefile本身尽可能的简单与自动化，以便于编写。下面就围绕以上这些展开。\n\n### makefile的基本结构\n\nmakefile的基本结构如下：\n\n```makefile\ntarget : prerequisites\n    command #注意，这里的命令不能有空格，只能用制表符或换行符分隔\n    command\n   ...\n```\n\n其中意思是目标（target）依赖于前置条件（prerequisites），如果目标不存在或者前置条件中的文件有更新，那么就会执行命令（command）来生成新的目标。具体的命令makefile并不关心，可以是编译命令，也可以是`cat`、`mv`等任何命令。\n\n### makefile的一些规则\n\n#### 伪目标\n\nmakefile中的目标可以是文件名，也可以是伪目标。伪目标是一种特殊的目标，它不是一个文件，而更类似于一些操作。比如，我们可以定义一个伪目标`clean`，用于清除所有的中间文件乃至目标文件，这样我们只需要输入`make clean`就可以自动化清除。\n\n具体实例：\n\n```makefile\nclean :\n    rm -f *.o $(TARGET) \n```\n\n{% folding green::关于伪目标的好习惯 %}\n一般来说，`clean`、`install`都是约定俗成的伪目标名称，不会有这样名称的文件或目录。\n\n但以防这种情况出现，一般会在伪目标前声名：\n\n```makefile\n.PHONY: <伪目标名1> <伪目标名2>...\n```\n\n这样的话，即使有`clean`这样的文件或目录，`make clean`也能正常发挥它的作用。\n{% endfolding %}\n\n#### 执行多条命令\n\nmakefile中的命令可以是一条，也可以是多条。如果一条命令执行失败，那么makefile会停止执行。\n\n例如：\n\n```makefile\ntest : \n    pwd\n    cd ..\n    pwd\n```\n\n但make针对每一行指令都会单独创建一个shell环境，如果想要在同一个shell环境中执行，需要在同一行使用`;`间隔（也可以使用`\\`换行）。\n\n例如：\n\n```makefile\ntest : \n    pwd; \\\n    cd ..; \\ \n    pwd\n```\n\n还可以使用`&&`执行多行命令，好处是如果前一条命令执行失败，那么后面的命令就不会执行。\n\n#### 控制打印与错误\n\n默认情况下，make会打印出它执行的每一条命令。如果我们不想打印某一条命令，可以在命令前加上`@`，表示不打印命令（但是仍然会执行）。\n\n例如：\n\n```makefile\ntest : \n    @echo \"This command will not be printed\"\n    ls -l /usr/bin/ | grep \"bin\"\n```\n\nmake在执行命令时，会检查每一条命令的返回值，如果返回错误（非0值），就会中断执行。有些时候，我们想忽略错误，继续执行后续命令，可以在需要忽略错误的命令前加上`-`。对于执行可能出错，但不影响逻辑的命令，可以用`-`忽略。\n\n例如：\n\n```makefile\ntest : \n    rm a.txt\n    -cat a.txt\n```\n\n#### 隐式规则\n\n当make执行过程中遇见一个未定义的目标时，它会试图使用隐式规则来生成这个目标。隐式规则是指make根据文件名、文件扩展名、目录结构等信息，自动生成命令。\n\n例如对于C程序的`.o`文件，如果我们没有对应的命令，就会自动应用以下的规则：\n\n```makefile\nxyz.o: xyz.c\n\tgcc -c -o xyz.o xyz.c\n```\n\n但这一隐式规则的缺陷在于此时`.o`文件无法跟踪`.h`文件的变化。\n\n#### 变量\n\nmakefile中的变量可以用于简化makefile，并提高可读性。变量的定义格式为`变量名 = 值`或者`变量名 := 值`，变量名和等号之间不能有空格，通常变量名全大写。引用变量用`$(变量名)`\n\n例如：\n\n```makefile\nCC = gcc\nCFLAGS = -Wall -g\nTARGET = program\nOBJS = main.o source.o\n\n$(TARGET) : $(OBJS)\n\t$(CC) $(CFLAGS) $(OBJS) -o $(TARGET)\n\nclean :\n\trm -f $(OBJS) $(TARGET)\n```\n\n除了自设的变量外，makefile还提供了一些内置变量与自动变量。\n\n内置变量比如`CC`，默认值为`cc`，`CFLAGS`，默认值为`-c`。当然，我们也可以自定义这些内置变量，比如在上面的例子。\n\n自动变量比如`$@`表示目标文件名，`$^`表示所有前置条件，`$<`表示第一个前置条件。如果存在歧义，那么需要用`$()`括起变量名，就如调用其他变量一般。\n\n### makefile中可能用到的一些函数\n\n- `$(wildcard pattern)`：匹配pattern模式的文件名，返回匹配的文件名列表。\n- `$(addprefix prefix,names)`：在names前面添加prefix，返回新的字符串列表。\n- `$(addsuffix suffix,names)`：在names后面添加suffix，返回新的字符串列表。\n- `$(sort names)`：对names进行排序，返回新的字符串列表。\n- `$(dir names)`：返回names的目录部分。\n- `$(patsubst pattern,replacement,names)`: 用replacement替换names中所有匹配pattern的部分。\n- `sed 's/pattern/replacement/g' file`：用replacement替换file中所有匹配pattern的部分。`(linux环境)\n\n### 一份自动生成依赖的makefile示例\n\n> 引自[廖雪峰的官方网站-makefile教程](https://liaoxuefeng.com/books/makefile/complete/index.html)\n\n目录结构：\n\n```\n<project>\n├── Makefile\n├── build\n└── src\n    ├── hello.c\n    ├── hello.h\n    └── main.c\n```\n\nmakefile内容：\n\n```makefile\nSRC_DIR = ./src\nBUILD_DIR = ./build\nTARGET = $(BUILD_DIR)/world.out\n\nCC = cc\nCFLAGS = -Wall\n\n# ./src/*.c\nSRCS = $(shell find $(SRC_DIR) -name '*.c')\n# ./src/*.c => ./build/*.o\nOBJS = $(patsubst $(SRC_DIR)/%.c,$(BUILD_DIR)/%.o,$(SRCS))\n# ./src/*.c => ./build/*.d\nDEPS = $(patsubst $(SRC_DIR)/%.c,$(BUILD_DIR)/%.d,$(SRCS))\n\n# 默认目标:\nall: $(TARGET)\n\n# build/xyz.d 的规则由 src/xyz.c 生成:\n$(BUILD_DIR)/%.d: $(SRC_DIR)/%.c\n\t@mkdir -p $(dir $@); \\\n\trm -f $@; \\\n\t$(CC) -MM $< >$@.tmp; \\\n\tsed 's,\\($*\\)\\.o[ :]*,\\1.o $@ : ,g' < $@.tmp > $@; \\\n\trm -f $@.tmp\n\n# build/xyz.o 的规则由 src/xyz.c 生成:\n$(BUILD_DIR)/%.o: $(SRC_DIR)/%.c\n\t@mkdir -p $(dir $@)\n\t$(CC) $(CFLAGS) -c -o $@ $<\n\n# 链接:\n$(TARGET): $(OBJS)\n\t@echo \"buiding $@...\"\n\t@mkdir -p $(dir $@)\n\t$(CC) -o $(TARGET) $(OBJS)\n\n# 清理 build 目录:\nclean:\n\t@echo \"clean...\"\n\trm -rf $(BUILD_DIR)\n\n# 引入所有 .d 文件:\n-include $(DEPS)\n```\n\n补充说明：\n\n- `include`的作用类似于C中的`#include`，用于引入其他makefile或者文件。被引用的文件会原模原样的放在当前文件的包含位置。\n\n## 未尽的内容\n\nmakefile还有一些更高级的用法，比如条件判断、函数、自动变量、多目标、多重目标等等，这些内容我还没看，因为暂时还没有遇到必须要使用的场景。\n\n此外，我一开始是想要学习`cmake`的使用，但我对c++的了解还不够，还有我目前还不需要构建复杂项目，所以也就没有深入研究。\n\n最后，这篇文章参考了陈皓的CSDN专栏文章[《跟我一起写 Makefile》](https://blog.csdn.net/whitefish520/article/details/103968609)（这里链接给的是汇总版），同时也参考了[廖雪峰的官方网站](https://liaoxuefeng.com/books/makefile/introduction/index.html)，感谢。","source":"_posts/makefile.md","raw":"---\ntitle: makefile\ndate: 2024-09-02 16:40:19\ntags: [\"makefile\"]\ncategories: [\"tools\"]\nexcerpt : \"makefile的基本用法，待补充...\"\n---\n\n\n上一学年，我对C的编译过程都是一知半解，以至于我都不知道如何编译一个稍微复杂一点的项目（之前都是靠vs或者dev-c++自带的工具实现）。在暑期短学期时，稍微系统的学习了程序的编译过程，但对于如何编译一个项目还是不怎么了解，这几天闲着没什么事，便搜索了一下相关内容，发现了make这个工具，进而了解了makefile的基本用法，这里也是简单写写我认识的一个简单过程。\n\n## C程序编译过程\n\n一个C程序的编译过程大概可以分为以下几个步骤：\n\n1. 预处理：预处理器会把所有的#include、#define、#undef等预处理指令展开，并将其替换为实际的C代码，生成`.i`文件。\n2. 编译：编译器会把预处理后的代码编译成汇编代码，生成`.s`文件。\n3. 汇编：汇编器会把汇编代码转换成机器码,生成`.o`文件。\n4. 链接：链接器会把多个目标文件和库文件链接成一个可执行文件。\n\n由于这里不是介绍编译过程的教程，所以我就不详细介绍了。但简单来说，如果用gcc编译器，那么一个简单的项目可以用以下命令实现编译：\n\n```shell\ngcc -c source.c -o source.o\ngcc -c main.c -o main.o\ngcc source.o main.o -o program\n```\n\n{% folding green::另外一些可能用到的参数 %}\n新增头文件路径 : `-I<path>`\n识别`.c`文件头文件依赖：`-MM`\n编译过程中开启更多的警告：`-Wall` `-Wextra` \n编译过程中将所有警告视为报错：`-Werror`\n{% endfolding %}\n\n## makefile\n\n### 使用makefile想要达到的目的\n\nmakefile的主要作用是自动化编译过程，而如何自动化，我希望我每次输入`make`至少应该做到：\n\n1. 如果这个工程没有编译过，那么我们的所有C文件都要编译并被链接。\n2. 如果这个工程的某几个C文件被修改，那么我们只编译被修改的C文件，并链接目标程序。\n3. 如果这个工程的头文件被改变了，那么我们需要编译引用了这几个头文件的C文件，并链接目标程序。\n\n同时我还希望我编写的makefile本身尽可能的简单与自动化，以便于编写。下面就围绕以上这些展开。\n\n### makefile的基本结构\n\nmakefile的基本结构如下：\n\n```makefile\ntarget : prerequisites\n    command #注意，这里的命令不能有空格，只能用制表符或换行符分隔\n    command\n   ...\n```\n\n其中意思是目标（target）依赖于前置条件（prerequisites），如果目标不存在或者前置条件中的文件有更新，那么就会执行命令（command）来生成新的目标。具体的命令makefile并不关心，可以是编译命令，也可以是`cat`、`mv`等任何命令。\n\n### makefile的一些规则\n\n#### 伪目标\n\nmakefile中的目标可以是文件名，也可以是伪目标。伪目标是一种特殊的目标，它不是一个文件，而更类似于一些操作。比如，我们可以定义一个伪目标`clean`，用于清除所有的中间文件乃至目标文件，这样我们只需要输入`make clean`就可以自动化清除。\n\n具体实例：\n\n```makefile\nclean :\n    rm -f *.o $(TARGET) \n```\n\n{% folding green::关于伪目标的好习惯 %}\n一般来说，`clean`、`install`都是约定俗成的伪目标名称，不会有这样名称的文件或目录。\n\n但以防这种情况出现，一般会在伪目标前声名：\n\n```makefile\n.PHONY: <伪目标名1> <伪目标名2>...\n```\n\n这样的话，即使有`clean`这样的文件或目录，`make clean`也能正常发挥它的作用。\n{% endfolding %}\n\n#### 执行多条命令\n\nmakefile中的命令可以是一条，也可以是多条。如果一条命令执行失败，那么makefile会停止执行。\n\n例如：\n\n```makefile\ntest : \n    pwd\n    cd ..\n    pwd\n```\n\n但make针对每一行指令都会单独创建一个shell环境，如果想要在同一个shell环境中执行，需要在同一行使用`;`间隔（也可以使用`\\`换行）。\n\n例如：\n\n```makefile\ntest : \n    pwd; \\\n    cd ..; \\ \n    pwd\n```\n\n还可以使用`&&`执行多行命令，好处是如果前一条命令执行失败，那么后面的命令就不会执行。\n\n#### 控制打印与错误\n\n默认情况下，make会打印出它执行的每一条命令。如果我们不想打印某一条命令，可以在命令前加上`@`，表示不打印命令（但是仍然会执行）。\n\n例如：\n\n```makefile\ntest : \n    @echo \"This command will not be printed\"\n    ls -l /usr/bin/ | grep \"bin\"\n```\n\nmake在执行命令时，会检查每一条命令的返回值，如果返回错误（非0值），就会中断执行。有些时候，我们想忽略错误，继续执行后续命令，可以在需要忽略错误的命令前加上`-`。对于执行可能出错，但不影响逻辑的命令，可以用`-`忽略。\n\n例如：\n\n```makefile\ntest : \n    rm a.txt\n    -cat a.txt\n```\n\n#### 隐式规则\n\n当make执行过程中遇见一个未定义的目标时，它会试图使用隐式规则来生成这个目标。隐式规则是指make根据文件名、文件扩展名、目录结构等信息，自动生成命令。\n\n例如对于C程序的`.o`文件，如果我们没有对应的命令，就会自动应用以下的规则：\n\n```makefile\nxyz.o: xyz.c\n\tgcc -c -o xyz.o xyz.c\n```\n\n但这一隐式规则的缺陷在于此时`.o`文件无法跟踪`.h`文件的变化。\n\n#### 变量\n\nmakefile中的变量可以用于简化makefile，并提高可读性。变量的定义格式为`变量名 = 值`或者`变量名 := 值`，变量名和等号之间不能有空格，通常变量名全大写。引用变量用`$(变量名)`\n\n例如：\n\n```makefile\nCC = gcc\nCFLAGS = -Wall -g\nTARGET = program\nOBJS = main.o source.o\n\n$(TARGET) : $(OBJS)\n\t$(CC) $(CFLAGS) $(OBJS) -o $(TARGET)\n\nclean :\n\trm -f $(OBJS) $(TARGET)\n```\n\n除了自设的变量外，makefile还提供了一些内置变量与自动变量。\n\n内置变量比如`CC`，默认值为`cc`，`CFLAGS`，默认值为`-c`。当然，我们也可以自定义这些内置变量，比如在上面的例子。\n\n自动变量比如`$@`表示目标文件名，`$^`表示所有前置条件，`$<`表示第一个前置条件。如果存在歧义，那么需要用`$()`括起变量名，就如调用其他变量一般。\n\n### makefile中可能用到的一些函数\n\n- `$(wildcard pattern)`：匹配pattern模式的文件名，返回匹配的文件名列表。\n- `$(addprefix prefix,names)`：在names前面添加prefix，返回新的字符串列表。\n- `$(addsuffix suffix,names)`：在names后面添加suffix，返回新的字符串列表。\n- `$(sort names)`：对names进行排序，返回新的字符串列表。\n- `$(dir names)`：返回names的目录部分。\n- `$(patsubst pattern,replacement,names)`: 用replacement替换names中所有匹配pattern的部分。\n- `sed 's/pattern/replacement/g' file`：用replacement替换file中所有匹配pattern的部分。`(linux环境)\n\n### 一份自动生成依赖的makefile示例\n\n> 引自[廖雪峰的官方网站-makefile教程](https://liaoxuefeng.com/books/makefile/complete/index.html)\n\n目录结构：\n\n```\n<project>\n├── Makefile\n├── build\n└── src\n    ├── hello.c\n    ├── hello.h\n    └── main.c\n```\n\nmakefile内容：\n\n```makefile\nSRC_DIR = ./src\nBUILD_DIR = ./build\nTARGET = $(BUILD_DIR)/world.out\n\nCC = cc\nCFLAGS = -Wall\n\n# ./src/*.c\nSRCS = $(shell find $(SRC_DIR) -name '*.c')\n# ./src/*.c => ./build/*.o\nOBJS = $(patsubst $(SRC_DIR)/%.c,$(BUILD_DIR)/%.o,$(SRCS))\n# ./src/*.c => ./build/*.d\nDEPS = $(patsubst $(SRC_DIR)/%.c,$(BUILD_DIR)/%.d,$(SRCS))\n\n# 默认目标:\nall: $(TARGET)\n\n# build/xyz.d 的规则由 src/xyz.c 生成:\n$(BUILD_DIR)/%.d: $(SRC_DIR)/%.c\n\t@mkdir -p $(dir $@); \\\n\trm -f $@; \\\n\t$(CC) -MM $< >$@.tmp; \\\n\tsed 's,\\($*\\)\\.o[ :]*,\\1.o $@ : ,g' < $@.tmp > $@; \\\n\trm -f $@.tmp\n\n# build/xyz.o 的规则由 src/xyz.c 生成:\n$(BUILD_DIR)/%.o: $(SRC_DIR)/%.c\n\t@mkdir -p $(dir $@)\n\t$(CC) $(CFLAGS) -c -o $@ $<\n\n# 链接:\n$(TARGET): $(OBJS)\n\t@echo \"buiding $@...\"\n\t@mkdir -p $(dir $@)\n\t$(CC) -o $(TARGET) $(OBJS)\n\n# 清理 build 目录:\nclean:\n\t@echo \"clean...\"\n\trm -rf $(BUILD_DIR)\n\n# 引入所有 .d 文件:\n-include $(DEPS)\n```\n\n补充说明：\n\n- `include`的作用类似于C中的`#include`，用于引入其他makefile或者文件。被引用的文件会原模原样的放在当前文件的包含位置。\n\n## 未尽的内容\n\nmakefile还有一些更高级的用法，比如条件判断、函数、自动变量、多目标、多重目标等等，这些内容我还没看，因为暂时还没有遇到必须要使用的场景。\n\n此外，我一开始是想要学习`cmake`的使用，但我对c++的了解还不够，还有我目前还不需要构建复杂项目，所以也就没有深入研究。\n\n最后，这篇文章参考了陈皓的CSDN专栏文章[《跟我一起写 Makefile》](https://blog.csdn.net/whitefish520/article/details/103968609)（这里链接给的是汇总版），同时也参考了[廖雪峰的官方网站](https://liaoxuefeng.com/books/makefile/introduction/index.html)，感谢。","slug":"makefile","published":1,"updated":"2024-09-19T01:30:30.381Z","_id":"cm18m4j4l00098kd0agtu7o0u","comments":1,"layout":"post","photos":[]},{"title":"绍兴一日游","date":"2024-08-31T08:36:48.000Z","excerpt":"绍兴游玩的经历，包括鲁迅故里、沈园、周恩来祖居...","_content":"\n从新生军训开始后，我就几乎没什么事了，这两天学习也学不进去，于是心血来潮，打算出去走走。\n\n虽然来杭州差不多一年了，但杭州很多地方都没去过，附近一些城市的探索度更是为0。简单查了一些攻略，发现杭州可以直接坐地铁到绍兴（杭州五号线转绍兴一号线，单程价格大约在15元左右），而且可以直接坐到鲁迅故居附近，便直接预约了景点门票。\n\n但查了一下天气，发现30号杭州附近温度又升了上去，绍兴最高温也升到35度左右，再加上高湿度，体感预计要达到40度(；′⌒`)。但实在不想再在宿舍待着了，也就没有管那么多直接出发了（￣︶￣）↗。\n\n一天预计的路线如下：\n\n![路线](/img/shaoxing/绍兴.jpg)\n\n## 鲁迅故里\n\n鲁迅故里包括了鲁迅故居，鲁迅纪念馆以及三味书屋，是我这一次去绍兴的主要目的地。\n\n![鲁迅像](/img/shaoxing/鲁迅木刻.jpg)\n\n我先到的是鲁迅故居。鲁迅故居里没有太多关于鲁迅生平的介绍，前半部分是周家的历史、周作人的生平以及赵延年先生的鲁迅作品版画插图优秀作品展。\n\n我还是很喜欢赵延年先生的作品，上面那个鲁迅像也是他的作品。前段时间知乎举行了一个名画评比大赛，赵延年先生的狂人日记插图之十二也参加了，就是下面这张：\n\n![插图10](/img/shaoxing/插图之十二.jpg)\n\n但说实话这张不是我最喜欢的，我还是更喜欢下面这两张，更有版画的那种木刻的冷峻感（不太懂艺术用语，可能表达的不甚准确），也更有鲁迅作品的韵味。\n\n![插图21](/img/shaoxing/插图21.jpg)\n\n![插图32](/img/shaoxing/插图32.jpg)\n\n除此之外，我还发现那张祥林嫂风雪夜的经典插画也是他的作品\n\n![插图xls](/img/shaoxing/插图xls.jpg)\n\n在故居的后半部分（百草园之后的部分），主要是鲁迅作品的一些场景复刻，复刻的比较一般，但是一些基础的绍兴民俗介绍，让我对鲁迅作品背景有了更多的认识。\n\n后面到鲁迅纪念馆，这里详细的介绍了鲁迅的生平。但除了鲁迅生平，我还了解了一些意外的知识，比如禹陵在绍兴，比如古时绍兴就是越州，越国的很多故事比如越王卧薪尝胆等等的舞台也是在这里。\n\n在展馆的最后一部分是一个研学基地，我还体验了一下拓印，拓了一份藏书票：\n\n![藏书票](/img/shaoxing/藏书票.jpg)\n\n最后是到三味书屋，成功看见了早字，还顺带买了三张纪念明信片。\n\n![明信片](/img/shaoxing/明信片.jpg)\n\n## 沈园\n\n沈园是绍兴的著名景点之一，也是我这次的另一个想要去的地方（也是这次去的唯一一个门票花钱的景点...）。\n\n但进沈园实际上也只是想看看陆游和唐琬的两篇钗头凤，顺带看看陆游纪念馆，沈园本身我倒没有太多想要看的，因为它无论从规模还是造景都比不上那些著名的园林。\n\n![钗头凤墙](/img/shaoxing/钗头凤墙.jpg)\n\n{% folding green::钗头凤·红酥手 %}\n红酥手，黄縢酒，满城春色宫墙柳。东风恶，欢情薄。一怀愁绪，几年离索。错、错、错。\n春如旧，人空瘦，泪痕红浥鲛绡透。桃花落，闲池阁。山盟虽在，锦书难托。莫、莫、莫！\n{% endfolding %}\n\n陆游这一篇我很早以前就读过了，毕竟和刻板印象中的爱国诗人区别很大，而且“错、错、错”“莫、莫、莫”这两处中抒发的感情实在很难不让人震撼。自己试着读了几遍，都不是很满意，感觉感情有点过于平淡了。在b站搜了一下就找到一个视频，感觉感情处理得很好，放在下面了。\n\n<iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=542920907&bvid=BV1qi4y1V7gq&cid=260541254&p=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"></iframe>\n\n当时读这首诗的时候，没怎么了解背景故事。我也是在搜索沈园是什么地方的时候才知道这个故事，也是在这时候才知道原来还有唐琬的一首和词。（最开始我还感到奇怪，沈园为什么能和鲁迅故里并列...）\n\n这里也就不多介绍钗头凤这个故事（和孔雀东南飞有点像，不过这里是遗憾结局，比双亡结局悲凉许多），也不赏析这两首词，如果大家感兴趣可以自行搜索。\n\n## 周恩来祖居\n\n![周恩来回绍兴](/img/shaoxing/周恩来回绍兴.jpg)\n\n一开始打算去书圣故里看看的，但那里在施工，加上当时十二点多，天气太热，不想逛室外的景点，便直接去了周恩来祖居。\n\n周恩来童年读书处、周恩来故居以及周恩来纪念馆我都去过了很多次，这次来周恩来祖居，算是又填上了经历上的一部分空白。本来是打算走马观花看一眼结束，但凑巧的是有一组旅行团在这里，还有人专门讲解，我就跟着队伍听了前半程周恩来与绍兴、绍兴人的故事。后半程周恩来生平由于本身也比较了解，就简单看了看，之后就跑到观影室里面吹空调休息了（）。\n\n## 其他一些去的地方\n\n从周恩来祖居离开后，原本打算直接去仓桥直街，但路上没走多远就到了贺秘监祠，便进去参观了一下。\n\n贺秘监祠纪念的是盛唐大诗人贺知章。贺知章严格来说上不是绍兴人，但他早年移居绍兴，和绍兴有很深的缘分。我走马观花得从头到尾看了一遍，重温了他的那几首非常著名的诗（咏柳和回乡偶书两首），还了解了浙东唐诗之路这个概念（以前居然都没有听说过...）。感觉以后有时间我也能试着去走走。\n\n离开贺秘监祠就按原计划去了仓桥直街。可能是由于天气比较热，街上也没有多少人，但这条街本身也就是传统水乡古镇、古街的样子，没有什么特别。走完后也就前往地铁站回杭州了。\n\n## 最后一些想说的\n\n这篇游记写的还是有点过分流水帐了...太久没写文字，写到后面都不太想写了，于是有很多偷懒的地方，也有玩的时候想展开的东西没写...还是得多写写东西才行😢。\n\n这次去绍兴，主要还是看了些人文景观，或者更具体的来说是看了些名人留下的遗迹。说实话还是有一些失望的，因为没有看到出乎意料的东西。不过，能看到特别的东西才是罕见的才对，这也许也是我对人文景观兴趣越来越小的原因之一吧。\n\n不过以后我应该至少还会去绍兴两三次，预计是去市中心以外的地方转转，看看东湖，看看贺知章笔下“春风不改旧时波”的镜湖水，看看兰亭、会稽山，也许还会祭拜一下大禹陵，等等。（绍兴的文化遗址好多⊙﹏⊙∥）\n\n好了，文章到这里也就结束了，希望大家能喜欢。\n\n![大善塔](/img/shaoxing/路上遇见的塔.jpg)","source":"_posts/绍兴一日游.md","raw":"---\ntitle: 绍兴一日游\ndate: 2024-08-31 16:36:48\ntags: [\"一日游\"]\nexcerpt : \"绍兴游玩的经历，包括鲁迅故里、沈园、周恩来祖居...\"\ncategories: [\"daily life\"]\n---\n\n从新生军训开始后，我就几乎没什么事了，这两天学习也学不进去，于是心血来潮，打算出去走走。\n\n虽然来杭州差不多一年了，但杭州很多地方都没去过，附近一些城市的探索度更是为0。简单查了一些攻略，发现杭州可以直接坐地铁到绍兴（杭州五号线转绍兴一号线，单程价格大约在15元左右），而且可以直接坐到鲁迅故居附近，便直接预约了景点门票。\n\n但查了一下天气，发现30号杭州附近温度又升了上去，绍兴最高温也升到35度左右，再加上高湿度，体感预计要达到40度(；′⌒`)。但实在不想再在宿舍待着了，也就没有管那么多直接出发了（￣︶￣）↗。\n\n一天预计的路线如下：\n\n![路线](/img/shaoxing/绍兴.jpg)\n\n## 鲁迅故里\n\n鲁迅故里包括了鲁迅故居，鲁迅纪念馆以及三味书屋，是我这一次去绍兴的主要目的地。\n\n![鲁迅像](/img/shaoxing/鲁迅木刻.jpg)\n\n我先到的是鲁迅故居。鲁迅故居里没有太多关于鲁迅生平的介绍，前半部分是周家的历史、周作人的生平以及赵延年先生的鲁迅作品版画插图优秀作品展。\n\n我还是很喜欢赵延年先生的作品，上面那个鲁迅像也是他的作品。前段时间知乎举行了一个名画评比大赛，赵延年先生的狂人日记插图之十二也参加了，就是下面这张：\n\n![插图10](/img/shaoxing/插图之十二.jpg)\n\n但说实话这张不是我最喜欢的，我还是更喜欢下面这两张，更有版画的那种木刻的冷峻感（不太懂艺术用语，可能表达的不甚准确），也更有鲁迅作品的韵味。\n\n![插图21](/img/shaoxing/插图21.jpg)\n\n![插图32](/img/shaoxing/插图32.jpg)\n\n除此之外，我还发现那张祥林嫂风雪夜的经典插画也是他的作品\n\n![插图xls](/img/shaoxing/插图xls.jpg)\n\n在故居的后半部分（百草园之后的部分），主要是鲁迅作品的一些场景复刻，复刻的比较一般，但是一些基础的绍兴民俗介绍，让我对鲁迅作品背景有了更多的认识。\n\n后面到鲁迅纪念馆，这里详细的介绍了鲁迅的生平。但除了鲁迅生平，我还了解了一些意外的知识，比如禹陵在绍兴，比如古时绍兴就是越州，越国的很多故事比如越王卧薪尝胆等等的舞台也是在这里。\n\n在展馆的最后一部分是一个研学基地，我还体验了一下拓印，拓了一份藏书票：\n\n![藏书票](/img/shaoxing/藏书票.jpg)\n\n最后是到三味书屋，成功看见了早字，还顺带买了三张纪念明信片。\n\n![明信片](/img/shaoxing/明信片.jpg)\n\n## 沈园\n\n沈园是绍兴的著名景点之一，也是我这次的另一个想要去的地方（也是这次去的唯一一个门票花钱的景点...）。\n\n但进沈园实际上也只是想看看陆游和唐琬的两篇钗头凤，顺带看看陆游纪念馆，沈园本身我倒没有太多想要看的，因为它无论从规模还是造景都比不上那些著名的园林。\n\n![钗头凤墙](/img/shaoxing/钗头凤墙.jpg)\n\n{% folding green::钗头凤·红酥手 %}\n红酥手，黄縢酒，满城春色宫墙柳。东风恶，欢情薄。一怀愁绪，几年离索。错、错、错。\n春如旧，人空瘦，泪痕红浥鲛绡透。桃花落，闲池阁。山盟虽在，锦书难托。莫、莫、莫！\n{% endfolding %}\n\n陆游这一篇我很早以前就读过了，毕竟和刻板印象中的爱国诗人区别很大，而且“错、错、错”“莫、莫、莫”这两处中抒发的感情实在很难不让人震撼。自己试着读了几遍，都不是很满意，感觉感情有点过于平淡了。在b站搜了一下就找到一个视频，感觉感情处理得很好，放在下面了。\n\n<iframe src=\"//player.bilibili.com/player.html?isOutside=true&aid=542920907&bvid=BV1qi4y1V7gq&cid=260541254&p=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\"></iframe>\n\n当时读这首诗的时候，没怎么了解背景故事。我也是在搜索沈园是什么地方的时候才知道这个故事，也是在这时候才知道原来还有唐琬的一首和词。（最开始我还感到奇怪，沈园为什么能和鲁迅故里并列...）\n\n这里也就不多介绍钗头凤这个故事（和孔雀东南飞有点像，不过这里是遗憾结局，比双亡结局悲凉许多），也不赏析这两首词，如果大家感兴趣可以自行搜索。\n\n## 周恩来祖居\n\n![周恩来回绍兴](/img/shaoxing/周恩来回绍兴.jpg)\n\n一开始打算去书圣故里看看的，但那里在施工，加上当时十二点多，天气太热，不想逛室外的景点，便直接去了周恩来祖居。\n\n周恩来童年读书处、周恩来故居以及周恩来纪念馆我都去过了很多次，这次来周恩来祖居，算是又填上了经历上的一部分空白。本来是打算走马观花看一眼结束，但凑巧的是有一组旅行团在这里，还有人专门讲解，我就跟着队伍听了前半程周恩来与绍兴、绍兴人的故事。后半程周恩来生平由于本身也比较了解，就简单看了看，之后就跑到观影室里面吹空调休息了（）。\n\n## 其他一些去的地方\n\n从周恩来祖居离开后，原本打算直接去仓桥直街，但路上没走多远就到了贺秘监祠，便进去参观了一下。\n\n贺秘监祠纪念的是盛唐大诗人贺知章。贺知章严格来说上不是绍兴人，但他早年移居绍兴，和绍兴有很深的缘分。我走马观花得从头到尾看了一遍，重温了他的那几首非常著名的诗（咏柳和回乡偶书两首），还了解了浙东唐诗之路这个概念（以前居然都没有听说过...）。感觉以后有时间我也能试着去走走。\n\n离开贺秘监祠就按原计划去了仓桥直街。可能是由于天气比较热，街上也没有多少人，但这条街本身也就是传统水乡古镇、古街的样子，没有什么特别。走完后也就前往地铁站回杭州了。\n\n## 最后一些想说的\n\n这篇游记写的还是有点过分流水帐了...太久没写文字，写到后面都不太想写了，于是有很多偷懒的地方，也有玩的时候想展开的东西没写...还是得多写写东西才行😢。\n\n这次去绍兴，主要还是看了些人文景观，或者更具体的来说是看了些名人留下的遗迹。说实话还是有一些失望的，因为没有看到出乎意料的东西。不过，能看到特别的东西才是罕见的才对，这也许也是我对人文景观兴趣越来越小的原因之一吧。\n\n不过以后我应该至少还会去绍兴两三次，预计是去市中心以外的地方转转，看看东湖，看看贺知章笔下“春风不改旧时波”的镜湖水，看看兰亭、会稽山，也许还会祭拜一下大禹陵，等等。（绍兴的文化遗址好多⊙﹏⊙∥）\n\n好了，文章到这里也就结束了，希望大家能喜欢。\n\n![大善塔](/img/shaoxing/路上遇见的塔.jpg)","slug":"绍兴一日游","published":1,"updated":"2024-09-06T14:02:27.685Z","comments":1,"layout":"post","photos":[],"_id":"cm18m4j4m000a8kd0gulq316e"},{"title":"杂谈 中秋","date":"2024-09-17T16:29:58.000Z","excerpt":"关于2024年中秋节的一些经历...","_content":"\n\n这个中秋我回家了一趟。正好也是中秋，就顺带写篇短文吧。\n\n我是在星期六下午就出发的，刚好逃开了台风。台风对杭州其实影响不大，没有出现特别极端的天气，因为杭州在台风圈的南侧，外加这次台风规模不算大。但我在家受到台风的影响也不算小，虽然离台风中心比较远远，但从云图也能看出北半侧的云系比较发达。16号一天都是阴天，也刮了一整天的风，傍晚出现了红色天空，天气预报说是要下雨，但一天也没下。尽管如此，这台风也让我担忧了很长时间，比如会不会让我第二天的高铁晚点甚至取消，但后来都证明是我自己多虑了，我高估了这次台风的威力。\n\n尽管没有台风影响，我的返程之旅还是出问题了，是我自己的问题：我看错火车站了。直到下火车看到不熟悉的站台以及有些老旧的设施，我才意识到我没有到南京南，检查了一下车票才终于发现自己到了南京站。我购买的下一趟高铁是南京南到杭州西，中间留来换乘的50分钟不足以我坐地铁到南京南再检票入站。于是我立即着手改签，但无座订不到，时间又相当紧急，就连忙订了6点40的一个班次的商务座。这也是我第一次坐商务座。\n\n由于时间宽裕，后面赶路也就没那么着急了（晚高峰地铁好多人...），外加商务座有比较完善的一系列服务，商务座本身也相当宽敞舒适，整体体验还是相当不错的。至少远比前半程和身边一位大哥肩靠肩要舒适的多，就是花的钱比较心疼〒▽〒。\n\n说完了台风，还得回到正题——中秋节。中秋给我留下了十分深刻的印象，除去各种诗词故事，各种节日风俗，也仍然如此。比如我每年在家都会在12点前的一小段看看高悬夜空的月亮，名义上是想附和一下赏月的传统，但天上的月亮总是会勾起不少不太开心的回忆。去年没回家加上军训刚结束没多久，居然也就忘记了这回事，这次回家了，但中秋晚上没有在家，让我不由自主回想起这档事，也在从地铁站到学校的桥上，看了看月亮。它还是一如既往的皎洁。\n\n回忆这里就不谈了，毕竟谈着谈着就会让人心情低落，感慨也不提了，虽然之前打了不少腹稿，但真正动笔写下来，却总不能让我自己满意，有种言不达意的感觉。最后贴一张月亮，拍的很糊，但这也很像我眼中的月亮，也就保留在这里了。\n\n![moon](/img/zatan/月亮.jpg)\n","source":"_posts/杂谈-中秋.md","raw":"---\ntitle: 杂谈 中秋\ndate: 2024-09-18 00:29:58\ntags: [\"杂谈\"]\nexcerpt : 关于2024年中秋节的一些经历...\ncategories: [\"daily life\"]\n---\n\n\n这个中秋我回家了一趟。正好也是中秋，就顺带写篇短文吧。\n\n我是在星期六下午就出发的，刚好逃开了台风。台风对杭州其实影响不大，没有出现特别极端的天气，因为杭州在台风圈的南侧，外加这次台风规模不算大。但我在家受到台风的影响也不算小，虽然离台风中心比较远远，但从云图也能看出北半侧的云系比较发达。16号一天都是阴天，也刮了一整天的风，傍晚出现了红色天空，天气预报说是要下雨，但一天也没下。尽管如此，这台风也让我担忧了很长时间，比如会不会让我第二天的高铁晚点甚至取消，但后来都证明是我自己多虑了，我高估了这次台风的威力。\n\n尽管没有台风影响，我的返程之旅还是出问题了，是我自己的问题：我看错火车站了。直到下火车看到不熟悉的站台以及有些老旧的设施，我才意识到我没有到南京南，检查了一下车票才终于发现自己到了南京站。我购买的下一趟高铁是南京南到杭州西，中间留来换乘的50分钟不足以我坐地铁到南京南再检票入站。于是我立即着手改签，但无座订不到，时间又相当紧急，就连忙订了6点40的一个班次的商务座。这也是我第一次坐商务座。\n\n由于时间宽裕，后面赶路也就没那么着急了（晚高峰地铁好多人...），外加商务座有比较完善的一系列服务，商务座本身也相当宽敞舒适，整体体验还是相当不错的。至少远比前半程和身边一位大哥肩靠肩要舒适的多，就是花的钱比较心疼〒▽〒。\n\n说完了台风，还得回到正题——中秋节。中秋给我留下了十分深刻的印象，除去各种诗词故事，各种节日风俗，也仍然如此。比如我每年在家都会在12点前的一小段看看高悬夜空的月亮，名义上是想附和一下赏月的传统，但天上的月亮总是会勾起不少不太开心的回忆。去年没回家加上军训刚结束没多久，居然也就忘记了这回事，这次回家了，但中秋晚上没有在家，让我不由自主回想起这档事，也在从地铁站到学校的桥上，看了看月亮。它还是一如既往的皎洁。\n\n回忆这里就不谈了，毕竟谈着谈着就会让人心情低落，感慨也不提了，虽然之前打了不少腹稿，但真正动笔写下来，却总不能让我自己满意，有种言不达意的感觉。最后贴一张月亮，拍的很糊，但这也很像我眼中的月亮，也就保留在这里了。\n\n![moon](/img/zatan/月亮.jpg)\n","slug":"杂谈-中秋","published":1,"updated":"2024-09-18T00:43:22.957Z","comments":1,"layout":"post","photos":[],"_id":"cm18m4j4n000b8kd0d14w2z6m","content":"<p>这个中秋我回家了一趟。正好也是中秋，就顺带写篇短文吧。</p>\n<p>我是在星期六下午就出发的，刚好逃开了台风。台风对杭州其实影响不大，没有出现特别极端的天气，因为杭州在台风圈的南侧，外加这次台风规模不算大。但我在家受到台风的影响也不算小，虽然离台风中心比较远远，但从云图也能看出北半侧的云系比较发达。16号一天都是阴天，也刮了一整天的风，傍晚出现了红色天空，天气预报说是要下雨，但一天也没下。尽管如此，这台风也让我担忧了很长时间，比如会不会让我第二天的高铁晚点甚至取消，但后来都证明是我自己多虑了，我高估了这次台风的威力。</p>\n<p>尽管没有台风影响，我的返程之旅还是出问题了，是我自己的问题：我看错火车站了。直到下火车看到不熟悉的站台以及有些老旧的设施，我才意识到我没有到南京南，检查了一下车票才终于发现自己到了南京站。我购买的下一趟高铁是南京南到杭州西，中间留来换乘的50分钟不足以我坐地铁到南京南再检票入站。于是我立即着手改签，但无座订不到，时间又相当紧急，就连忙订了6点40的一个班次的商务座。这也是我第一次坐商务座。</p>\n<p>由于时间宽裕，后面赶路也就没那么着急了（晚高峰地铁好多人…），外加商务座有比较完善的一系列服务，商务座本身也相当宽敞舒适，整体体验还是相当不错的。至少远比前半程和身边一位大哥肩靠肩要舒适的多，就是花的钱比较心疼〒▽〒。</p>\n<p>说完了台风，还得回到正题——中秋节。中秋给我留下了十分深刻的印象，除去各种诗词故事，各种节日风俗，也仍然如此。比如我每年在家都会在12点前的一小段看看高悬夜空的月亮，名义上是想附和一下赏月的传统，但天上的月亮总是会勾起不少不太开心的回忆。去年没回家加上军训刚结束没多久，居然也就忘记了这回事，这次回家了，但中秋晚上没有在家，让我不由自主回想起这档事，也在从地铁站到学校的桥上，看了看月亮。它还是一如既往的皎洁。</p>\n<p>回忆这里就不谈了，毕竟谈着谈着就会让人心情低落，感慨也不提了，虽然之前打了不少腹稿，但真正动笔写下来，却总不能让我自己满意，有种言不达意的感觉。最后贴一张月亮，拍的很糊，但这也很像我眼中的月亮，也就保留在这里了。</p>\n<p><img src=\"/img/zatan/%E6%9C%88%E4%BA%AE.jpg\" alt=\"moon\"></p>\n","more":"<p>这个中秋我回家了一趟。正好也是中秋，就顺带写篇短文吧。</p>\n<p>我是在星期六下午就出发的，刚好逃开了台风。台风对杭州其实影响不大，没有出现特别极端的天气，因为杭州在台风圈的南侧，外加这次台风规模不算大。但我在家受到台风的影响也不算小，虽然离台风中心比较远远，但从云图也能看出北半侧的云系比较发达。16号一天都是阴天，也刮了一整天的风，傍晚出现了红色天空，天气预报说是要下雨，但一天也没下。尽管如此，这台风也让我担忧了很长时间，比如会不会让我第二天的高铁晚点甚至取消，但后来都证明是我自己多虑了，我高估了这次台风的威力。</p>\n<p>尽管没有台风影响，我的返程之旅还是出问题了，是我自己的问题：我看错火车站了。直到下火车看到不熟悉的站台以及有些老旧的设施，我才意识到我没有到南京南，检查了一下车票才终于发现自己到了南京站。我购买的下一趟高铁是南京南到杭州西，中间留来换乘的50分钟不足以我坐地铁到南京南再检票入站。于是我立即着手改签，但无座订不到，时间又相当紧急，就连忙订了6点40的一个班次的商务座。这也是我第一次坐商务座。</p>\n<p>由于时间宽裕，后面赶路也就没那么着急了（晚高峰地铁好多人…），外加商务座有比较完善的一系列服务，商务座本身也相当宽敞舒适，整体体验还是相当不错的。至少远比前半程和身边一位大哥肩靠肩要舒适的多，就是花的钱比较心疼〒▽〒。</p>\n<p>说完了台风，还得回到正题——中秋节。中秋给我留下了十分深刻的印象，除去各种诗词故事，各种节日风俗，也仍然如此。比如我每年在家都会在12点前的一小段看看高悬夜空的月亮，名义上是想附和一下赏月的传统，但天上的月亮总是会勾起不少不太开心的回忆。去年没回家加上军训刚结束没多久，居然也就忘记了这回事，这次回家了，但中秋晚上没有在家，让我不由自主回想起这档事，也在从地铁站到学校的桥上，看了看月亮。它还是一如既往的皎洁。</p>\n<p>回忆这里就不谈了，毕竟谈着谈着就会让人心情低落，感慨也不提了，虽然之前打了不少腹稿，但真正动笔写下来，却总不能让我自己满意，有种言不达意的感觉。最后贴一张月亮，拍的很糊，但这也很像我眼中的月亮，也就保留在这里了。</p>\n<p><img src=\"/img/zatan/%E6%9C%88%E4%BA%AE.jpg\" alt=\"moon\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm18m4j4g00058kd0h1o0fynq","category_id":"cm18m4j4i00078kd0731mdt7w","_id":"cm18m4j4p000f8kd0egfs3nqv"},{"post_id":"cm18m4j4h00068kd031v0h894","category_id":"cm18m4j4n000c8kd0cwf3a6l7","_id":"cm18m4j4r000k8kd0bbbw3cuk"},{"post_id":"cm18m4j4l00098kd0agtu7o0u","category_id":"cm18m4j4n000c8kd0cwf3a6l7","_id":"cm18m4j4s000n8kd06w6r2owq"},{"post_id":"cm18m4j4m000a8kd0gulq316e","category_id":"cm18m4j4r000j8kd0cygs7das","_id":"cm18m4j4t000r8kd0apa4g7mv"},{"post_id":"cm18m4j4n000b8kd0d14w2z6m","category_id":"cm18m4j4r000j8kd0cygs7das","_id":"cm18m4j4u000t8kd0713r6tnj"}],"PostTag":[{"post_id":"cm18m4j4g00058kd0h1o0fynq","tag_id":"cm18m4j4k00088kd08f6w8ury","_id":"cm18m4j4o000e8kd072xlcuma"},{"post_id":"cm18m4j4h00068kd031v0h894","tag_id":"cm18m4j4o000d8kd0d0x81nzb","_id":"cm18m4j4r000i8kd0fjtkgztc"},{"post_id":"cm18m4j4l00098kd0agtu7o0u","tag_id":"cm18m4j4p000h8kd03dha05lq","_id":"cm18m4j4r000m8kd08ia5alf4"},{"post_id":"cm18m4j4m000a8kd0gulq316e","tag_id":"cm18m4j4r000l8kd0f14j4akf","_id":"cm18m4j4t000q8kd05z3e5grq"},{"post_id":"cm18m4j4n000b8kd0d14w2z6m","tag_id":"cm18m4j4s000p8kd08adedrcj","_id":"cm18m4j4u000s8kd0acfo1t9k"}],"Tag":[{"name":"test","_id":"cm18m4j4k00088kd08f6w8ury"},{"name":"git","_id":"cm18m4j4o000d8kd0d0x81nzb"},{"name":"makefile","_id":"cm18m4j4p000h8kd03dha05lq"},{"name":"一日游","_id":"cm18m4j4r000l8kd0f14j4akf"},{"name":"杂谈","_id":"cm18m4j4s000p8kd08adedrcj"}]}}